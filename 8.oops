Q1) write the program of how an instance of a class (i.e an object ) of a class is created.
     class Student{ 
       String name; 
        String surname; 
       int rollNo; 
      Student(String studentName, String studentSurname, int studentRollNo){ 
       this.name= studentName; 
        this.surname = studentSurname; 
        this.rollNo= studentRollNo; 
     } 
    public void getStudentDetails(){ 
         System.out.println("The name of the student is "+ this.name +" "+ this.surname); 
         System.out.println("The roll no of the student is "+ this.rollNo); 
    } 
    } 
class OOPS{ 
      public static void main(String args[]) { 
        Student student1 = new Student("Vivek", "Yadav" , 20); 
         student1.getStudentDetails(); 
    } 
 }


Q2) Classes and Objects.
   public class OOps {
  public static void main(String[] args) {
    pen p1=new pen();
    p1.setColor("Blue");
    System.out.println(p1.color);
    p1.setTip(5);
    System.out.println(p1.tip);
    p1.setColor("Yellow");
    System.out.println(p1.color);
 class pen{
  String color;
  int tip;
  void setColor(String newColor){
    color=newColor;

  }
  void setTip(int newTip){

    tip= newTip;
  }
  }



Q3) Classes and objects.
public class OOps {
    static String Employee_name;
     static float Employee_salary;
    static void set(String n, float p){
        Employee_name =n;
        Employee_salary=p;

    }
      static void get(){
        System.out.println(Employee_name);
         System.out.println(Employee_salary);

    }

    public static void main(String[] args) {
        OOps.set("somya",100000.0f);
        OOps.get();
    }
}



Q4) Access Modifier.
public class OOps {
  public static void main(String[] args) {
 BankAccount myAcc =new BankAccount();
    myAcc.username ="somya";
    myAcc.setPassword ("abcdes");
  }
}
class BankAccount {
    public String username;
     private String password;
     public void setPassword(String pwd){
       password =pwd;
     }
  }


Q5) Getters and Setters.
  public class OOps {
  public static void main(String[] args) {
    pen p1=new pen();
    p1.setColor("Blue");
    System.out.println(p1.getColor());
    p1.setTip(5);
    System.out.println(p1.getTip());
    p1.setColor("Yellow");
    System.out.println(p1.getColor());
}
}
class pen{
 private String color;
   private int tip;
  String getColor(){
    return this.color;
  }
  int getTip(){
    return this.tip;
  }
  void setColor(String newColor){
    this.color=newColor;
 }
  void setTip(int Tip){

    this.tip=Tip;
  }
  }


Q6) Constructor
public class Constructor{
   Constructor(){
       super();
       System.out.println("Constructor called");
   }

    public static void main(String[] args) {
        Constructor somya=new Constructor();
    }
}
   
  
Q7) Constructors.
   public class OOps {
  public static void main(String[] args) {
Student s1 =new Student("Somya");
      System.out.println(s1.name);
  }
}
class Student{
    String name;
    int roll;
   Student(String name){
      this.name =name;
    }
}


Q8) Constructors.
public class OOps {
  public static void main(String[] args) {
Student s1 =new Student();
    Student s2= new Student("Somya");
    Student s3 =new Student(123);
  }
}
class Student {
    String name;
    int roll;

    Student() {
        System.out.println("constructor is called.....");
    }

    Student(String name) {
        this.name = name;
    }

    Student(int roll) {
        this.roll = roll;
    }
}

Q9) Default constructor.
class Constructor{
   Constructor(){
        System.out.println("Default constructor");
    }

    public static void main(String[] args) {
        Constructor somya=new Constructor();
    }
     }


Q10) Parameterized constructor.
class Constructor{
String name;
int id;
Constructor(String name,int id){
    this.name=name;
    this.id=id;

}
}
class Parameterized_constructor{
    public static void main(String[] args) {
        Constructor somya= new Constructor("saurav",21);
        System.out.println(  somya.name +" "+ somya.id);
    }
}

Q11) Constructor Overloading.
  class Constructor{
 Constructor(String name){
        System.out.println("constructor with one"+"argument String : "+ name);
    }
    Constructor(String name,int age){
        System.out.println("constructor with two argument:"+"String and integer:"+name +" "+age);

    }
    Constructor(long id){
        System.out.println("constructor with one argument:"+"long:"+id);
    }
}
class Overloading{
    public static void main(String[] args) {
        Constructor constructor1=new Constructor("Somya");


    Constructor constructor2= new Constructor("somya",21);
    Constructor constructor3= new Constructor(123456789);
}}

Q12)Constructor overloading.
  class Constructor {
  double width,height,depth;
    int boxNo;
    Constructor(double w,double h, double d,int num){
        width=w;
        depth=d;
        height=h;
        boxNo=num;

    }
    Constructor(){
        width=height=depth=0;
    }
    Constructor(int num){
        this();
        boxNo=num;
    }

    public static void main(String[] args) {
        Constructor box1= new Constructor(1);
        System.out.println(box1.width);
    }

}

Q13) Copy constructor.
  class Constructor {
  String name;
    int id;
    Constructor(String name,int id){
        this.name=name;
        this.id=id;
    }
    Constructor(Constructor obj2){
        this.name=obj2.name;
        this.id=obj2.id;
    }
}
class Copy_Constructor{
    public static void main(String[] args) {
        System.out.println("first object");
        Constructor constructor1= new Constructor("somya",21);
        System.out.println("ConstructorName:"+constructor1.name+" "+"constructorId:"+" "+constructor1.id);
        System.out.println();

        Constructor constructor2 = new Constructor(constructor1);
        System.out.println("copy constructor used second object");
        System.out.println("constructorName:"+constructor2.name+" "+"and constructorid:"+ constructor2.id);
    }
}
  

Q14) Copy constructors.
public class OOps {
  public static void main(String[] args) {
Student s1 =new Student();
   s1.name ="Somya";
   s1.roll =456;
   s1.password ="abcd";
      s1.marks[0]=100;
      s1.marks[1]=90;
      s1.marks[2]=80;

   Student s2 =new Student(s1);
   s2.password ="xyz";
   s1.marks[2]=100;
   for(int i=0;i<3;i++){
    System.out.println(s2.marks[i]);
}
}
}
      class Student {
    String name;
    int roll;
    String password;
    int marks[];
    Student(Student s1){
        this.name =s1.name;
        this.roll =s1.roll;
        this.marks =s1.marks;
    }
    Student() {
        marks =new int[3];
        System.out.println("constructor is called.....");
    }
   Student(String name) {
        marks =new int[3];
        this.name = name;
    }
   Student(int roll) {
        marks =new int[3];
        this.roll = roll;
    }
}

Q15) Deep copy constructors.
public class OOps {
  public static void main(String[] args) {
Student s1 =new Student();
   s1.name ="Somya";
   s1.roll =456;
   s1.password ="abcd";
      s1.marks[0]=100;
      s1.marks[1]=90;
      s1.marks[2]=80;
Student s2 =new Student(s1);
   s2.password ="xyz";
   s1.marks[2]=100;
   for(int i=0;i<3;i++){
    System.out.println(s2.marks[i]);
}
 }
}
      class Student {
    String name;
    int roll;
    String password;
    int marks[];
Student(Student s1) {
        marks = new int[3];
        this.name = s1.name;
        this.roll = s1.roll;
        for (int i = 0; i < marks.length; i++) {
            this.marks[i] = s1.marks[i];
}
    }

        Student(){
            marks=new int[3];
            System.out.println("constructor is called.....");
        }
    Student(String name) {
        marks =new int[3];
        this.name = name;
    }
 Student(int roll) {
        marks =new int[3];
        this.roll = roll;
    }
}

Q16) Constructor chaining using this() keyword.
  class Constructor {
   Constructor(){
        this(5);
        System.out.println("The default constructor");
    }

    Constructor(int x){
        this(5,15);
        System.out.println(x);
    }

    Constructor(int x,int y){
        System.out.println(x*y);
    }

    public static void main(String[] args) {
        new Constructor();
    }


}

Q17) Constructor chaining using super() keyword.
    class Constructor {
   String name;
        Constructor() {
            this("");
            System.out.println("No-argument constructor of" +
                    " base class");
        }
       Constructor(String name) {
            this.name = name;
            System.out.println("Calling parameterized constructor"
                    + " of base");
        }
    }

    class Derived extends Constructor {
    Derived() {
            System.out.println("No-argument constructor " +
                    "of derived");
        }
        Derived(String name) {

            super(name);
            System.out.println("Calling parameterized " +
                    "constructor of derived");
        }

        public static void main(String args[])
        {

            Derived obj = new Derived("test");


        }
    }

Q18) private constructor and singleton classes.
 class MySingleton {
        static MySingleton instance = null;
        public int x = 10;
        private MySingleton() { }
        static public MySingleton getInstance() {
            if (instance == null)
                instance = new MySingleton();

            return instance;
        }
    }


    class Main {
        public static void main(String args[]) {
            MySingleton a = MySingleton.getInstance();
            MySingleton b = MySingleton.getInstance();
            a.x = a.x + 10;
            System.out.println("Value of a.x = " + a.x);
            System.out.println("Value of b.x = " + b.x);
        }
    }

Q19) Abstraction
    abstract class Shape {
    String color;
    abstract double area();
    public abstract String toString();
    public Shape(String color) {
        System.out.println("Shape constructor called");
        this.color = color;
    }
    public String getColor() { return color; }
        }
class Circle extends Shape {
    double radius;

    public Circle(String color, double radius)
    {


        super(color);
        System.out.println("Circle constructor called");
        this.radius = radius;
    }

    @Override double area()
    {
        return Math.PI * Math.pow(radius, 2);
    }

    @Override public String toString()
    {
        return "Circle color is " + super.getColor()
                + "and area is : " + area();
    }
}
class Rectangle extends Shape {

    double length;
    double width;

    public Rectangle(String color, double length,
                     double width)
    {
        
        super(color);
        System.out.println("Rectangle constructor called");
        this.length = length;
        this.width = width;
    }

    @Override double area() { return length * width; }

    @Override public String toString()
    {
        return "Rectangle color is " + super.getColor()
                + "and area is : " + area();
    }
}
public class Test {
    public static void main(String[] args) {
        Shape s1 = new Circle("Red", 2.2);
        Shape s2 = new Rectangle("Yellow", 2, 4);

        System.out.println(s1.toString());
        System.out.println(s2.toString());
    }
}

Q20) Abstraction
  abstract class Animal {
    private String name;

    public Animal(String name) { this.name = name; }

    public abstract void makeSound();

    public String getName() { return name; }
}


class Dog extends Animal {
    public Dog(String name) { super(name); }

    public void makeSound()
    {
        System.out.println(getName() + " barks");
    }
}

class Cat extends Animal {
    public Cat(String name) { super(name); }

    public void makeSound()
    {
        System.out.println(getName() + " meows");
    }
}


public class Abstraction {

    public static void main(String[] args)
    {
        Animal myDog = new Dog("Buddy");
        Animal myCat = new Cat("Fluffy");

        myDog.makeSound();
        myCat.makeSound();
    }
}


Q21) Packages(Using Static import).
      package com.StaticImportDemo;
     import static java.lang.System.*;

   public class staticImportdemo {
    public static void main(String[] args) {
        out.println("somya");
    }

}

Q22) Abstraction.
   public class LearnAbstract {

    public static void main(String[] args) {
//        Vehicle v1 = new Vehicle();
        Car c1 = new Car();
        c1.accelerate();
        c1.brakes(4);
        c1.honks();
    }
}

abstract class Vehicle{
    abstract void accelerate();
    abstract  int brakes(int wheels);

    void honks(){
        System.out.println("Vehicle honks");
    }
}

class Scooter extends Vehicle{

    @Override
    void accelerate() {

    }

    @Override
    int brakes(int wheels) {
        return 0;
    }

    
}
class Car extends Vehicle {
    @Override
    void accelerate() {
        System.out.println("Car is Accelerating");

    }

    @Override
    int brakes(int wheels) {
        System.out.println("car breaks are pushed");
        return wheels;

    }
}

Q23) Interfaces in java.
 public class LearnInterface {
    public static void main(String[] args) {
        Monkey monkey = new Monkey();
        monkey.eats();

        System.out.println(Animal.LEGS);
    }

}

interface Pet{
    void sings();
}

interface Animal{

    int LEGS=  4;
   void eats();

    default void walk(){
        System.out.println("Animal is walking");

    }
}

class Monkey implements  Animal,Pet{
    @Override
    public void sings() {
        System.out.println("Monkey is singing");
    }

    @Override
    public void eats() {
        System.out.println("Monkey is eating");
    }
}

Q24) Inner classes and nested static class in java.
public class LearnInnerClass {
    class Toy{
        int price;
    }

     static class Playstation{
        int price;

    }

    public static void main(String[] args) {

        LearnInnerClass obj = new LearnInnerClass();
        Toy toy = obj. new Toy();
        toy.price=45;

        Playstation playstation = new LearnInnerClass.Playstation();
    }
}
