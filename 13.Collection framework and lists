   Arraylist:-
  Q1) Syntax for ArrayList.
    import java.util.ArrayList;
public class Arraylist {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        ArrayList<String> list2 = new ArrayList<>();
        ArrayList<Boolean> list3 = new ArrayList<>();
    }
}

Q2) Add element in ArrayList.
    import java.util.ArrayList;
    public class Arraylist {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        list.add(1,9);
     

        System.out.println(list);
    }
}

Q3) Get element in ArrayList.
    import java.util.ArrayList;
    public class Arraylist {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);

        System.out.println(list);

        //get operation
        int element = list.get(2);
        System.out.println(element);
    }
}

Q4) Remove element in ArrayList.
   import java.util.ArrayList;
    public class Arraylist {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);

        System.out.println(list);
          //Delete
        list.remove(2);
        System.out.println(list);
    }
}

Q5) Set element at index.
import java.util.ArrayList;
public class Arraylist {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);

        System.out.println(list);

          list.set(2,10);
        System.out.println(list);
    }
}

Q6) Contains element.
import java.util.ArrayList;
public class Arraylist {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);

        System.out.println(list);
       System.out.println(list.contains(1));
        System.out.println(list.contains(11));
    }
}

Q7) Size of arrayList.
   import java.util.ArrayList;
    public class Arraylist {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        list.add(1,9);

        System.out.println(list.size());
        for(int i=0;i<list.size();i++){
            System.out.print(list.get(i)+" ");
        }
        System.out.println();
}}

Q8) Print reverse of an ArrayList.
   import java.util.ArrayList;
     public class Arraylist {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        list.add(1,9);

        for(int i=list.size()-1;i>=0;i--){
            System.out.print(list.get(i)+" ");
        }
        System.out.println();
}}

Q9) Find maximum in an ArrayList.
  import java.util.ArrayList;
    public class Arraylist {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(2);
        list.add(5);
        list.add(9);
        list.add(6);
        list.add(8);
//        list.add(1,9);

        int max = Integer.MIN_VALUE;
        for (int i = 0; i < list.size(); i++) {
//            if (max < list.get(i)) {
//            max = list.get(i);
            max= Math.max(max, list.get(i));
        }
    
        System.out.println("max element = "+ max);
}}}

Q10) Swap 2 Numbers.
    import java.util.*;
    public class Arraylist {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(2);
        list.add(5);
        list.add(9);
        list.add(6);
        list.add(8);
        int idx1 = 1 , idx2 = 3;
        System.out.println(list);
        swap(list, idx1, idx2);
        System.out.println(list);
    }
        public static void swap(ArrayList<Integer>list,int idx1,int idx2){
            int temp=list.get(idx1);
            list.set(idx1,list.get(idx2));
            list.set(idx2,temp);
        }}

Q12) Arraylist methods.
    public class Arraylist {
            public static void main(String[] args) {
                List<Integer> list = new ArrayList<>();
//                List<Integer> list2= new ArrayList<>();
                list.add(10);
                list.add(20);
                list.add(1);
                
//                System.out.println(list.get(0));
//
//                System.out.println(list.indexOf(1));
//                list.set(1,200);
//
//
//                list.add(2,1000);
//                list.remove(1);
//                System.out.println(list);
//
//                list2.add(1);
//                list2.add(2);
//                list2.add(3);


//                System.out.println(list.size());
//                System.out.println(list.contains(200));
//                  list.remove(1);
//                System.out.println(list);
//
//                list.remove(Integer.valueOf(10));

//                list.addAll(list2);
//                list.removeAll(list2);
//                System.out.println(list);

//                list.clear();
//                Object a[]= list.toArray();
//                System.out.println(list);
//
//                for(Object e: a){
//                    Integer temp = (Integer) e;
//                    System.out.println(e);
//
//                }
//                System.out.println(list);
//
            }
}

Q13) Arraylist Methods.
import java.util.ArrayList;
import java.util.*;
public class ListMore {
    public static void main(String[] args) {
        List<String> fruits = new ArrayList<>();

        fruits.add("kiwi");
        fruits.add("papaya");
        fruits.add("mango");
        fruits.add("apple");

        for(int i =0; i<fruits.size();i++){
            System.out.println(fruits.get(i));
        }

        for(String fruit: fruits){
            System.out.println(fruit);

        }

        Iterator<String> fe = fruits.iterator();
        while(fe.hasNext()){
            System.out.println(fe.next());
        }

List<String> smallList = fruits.subList(1,3);
        System.out.println(smallList);
    }
}

Q14) LinkedList methods.
   import java.util.*;

public class llMethods {
    public static void main(String[] args) {
        LinkedList<String> ll = new LinkedList<String>();

        ll.add("A");
        ll.add("B");
        ll.addLast("C");
        ll.addFirst("D");
        ll.add(2,"E");
        System.out.println(ll);

        ll.remove("B");
        ll.remove(3);
        ll.removeFirst();
        ll.removeLast();

        System.out.println(ll);
    }
}

Q15) LinkedList
  import java.util.LinkedList;

public class llElementsAndOperations {
    public static void main(String[] args) {
        LinkedList<String> ll = new LinkedList<>();
        ll.add("somya");
        ll.add("simmi");
        ll.add(1,"for");

        System.out.println(ll);

//        ll.set(1,"is");
//
//        System.out.println(ll);

//        ll.remove(1);
//        System.out.println(ll);
//
//        ll.remove("simmi");
//        System.out.println(ll);

        for(int i =0;i<ll.size();i++){
            System.out.print(ll.get(i)+" ");
        }

        System.out.println();
        for(String str : ll)
            System.out.print(str + " ");
    }
}

Q16) Linkedlist
import java.util.LinkedList;

public class lloperations {
    public static void main(String[] args) {
        LinkedList<Integer> list = new LinkedList<>();
        list.add(123);
        list.add(12);
        list.add(11);
        list.add(1134);
        System.out.println(list);
//        Object[] a= list.toArray();
//        System.out.print("After conversion linkedlist to array");
//        for(Object element : a)
//            System.out.print(element +" ");

//        System.out.println(list.size());
//        System.out.println(list.removeFirst());
//        System.out.println(list);

        System.out.println(list.removeLast());
        System.out.println(list);
        System.out.println(list.removeLast());
        System.out.println(list);
    }
}
        
Q17) Vector class:-
import java.util.Vector;

public class vector_methods {
    public static void main(String[] args) {
        int n=5;
        Vector<Integer> v=new Vector<Integer>(n);
        for(int i=1;i<=n;i++)
            v.add(i);
            System.out.println(v);

            v.remove(3);
            System.out.println(v);

            for(int i=0;i<v.size();i++)
                System.out.print(v.get(i)+" ");


    }
}

Q18) Stack class.
import java.util.Stack;

public class StackMethods {
    static void stack_push(Stack<Integer> stack){
        System.out.println("push operation");
        for(int i=0;i<5;i++){
            stack.push(i);
        }
    }

    static void stack_peek(Stack<Integer> stack){
        Integer element = (Integer) stack.peek();
        System.out.println(element);
    }

    static void stack_pop(Stack<Integer> stack){
        System.out.println("pop operation");
        for(int i=0;i<5;i++){
            Integer y=(Integer) stack.pop();
            System.out.println(y);
        }

    }
    static void stack_search(Stack<Integer> stack, int element){
        Integer pos=(Integer) stack.search(element);
        if(pos ==-1)
            System.out.println("Element not found");
            else
            System.out.println(pos);


        }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<Integer>();
        stack_push(stack);
        stack_pop(stack);
        stack_push(stack);
        stack_peek(stack);
        stack_search(stack, 2);
        stack_search(stack, 6);

    }
    }

 Q19) Java Queue Interfaces.
import java.util.LinkedList;
import java.util.Queue;

public class LearnQueue {
    public static void main(String[] args) {

        Queue<Integer> q = new LinkedList<>();
        q.offer(10);
        q.offer(20);
        q.offer(30);
        q.offer(40);

        System.out.println(q);

        while(!q.isEmpty()){
            System.out.println(q.poll());
        }



        System.out.println(q.poll());

//        System.out.println(q);
//
//        System.out.println(q.poll());
//        System.out.println(q);
//
//        System.out.println(q.peek());
//        System.out.println(q);


    }
}

Q20) ArrayDeque class
import java.util.ArrayDeque;

public class LearnDeque {
    public static void main(String[] args) {
        ArrayDeque<Integer> dq = new ArrayDeque<>();
        dq.offer(10);
        dq.offerLast(20);
        dq.offerFirst(30);

        System.out.println(dq);

        System.out.println(dq.poll());
        System.out.println(dq.pollLast());
        System.out.println(dq);

        System.out.println(dq.peekLast());

    }
}

Q21)Stack and queue operations using ArrayDeque.

import java.util.ArrayDeque;

public class LearnDeque {
 public static void main(String[] args) {
  ArrayDeque<Integer> stack = new ArrayDeque<>();

        stack.push(10);
        stack.push(20);
        stack.push(30);
        System.out.println(stack);

        System.out.println(stack.pop());

        System.out.println(stack.peek());

        ArrayDeque<Integer> q = new ArrayDeque<>();
        q.offer(10);
        q.offer(20);
        q.offer(30);
        System.out.println("queue"+ q);

        System.out.println(q.poll());

    }
}
